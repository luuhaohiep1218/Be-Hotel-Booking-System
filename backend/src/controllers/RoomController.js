const asyncHandler = require("express-async-handler");
const Room = require("../models/RoomModel");
const aqp = require("api-query-params");

const getListRooms = asyncHandler(async (req, res) => {
  try {
    let { filter, limit, sort, skip, population } = aqp(req.query);

    // Chuy·ªÉn ƒë·ªïi gt, gte, lt, lte th√†nh $gt, $gte, $lt, $lte ƒë·ªÉ Mongoose hi·ªÉu
    if (filter.price && typeof filter.price === "object") {
      const priceConditions = {};
      Object.keys(filter.price).forEach((key) => {
        const newKey = `$${key}`; // Chuy·ªÉn "gt" th√†nh "$gt"
        priceConditions[newKey] = Number(filter.price[key]);
      });
      filter.price = priceConditions;
    } else if (filter.price) {
      filter.price = Number(filter.price);
    }

    const rooms = await Room.find(filter)
      .limit(limit)
      .skip(skip)
      .sort(sort)
      .populate(population);

    const totalRooms = await Room.countDocuments(filter);

    res.status(200).json({ totalRooms, rooms });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message || "L·ªói h·ªá th·ªëng" });
  }
});

const createRoom = asyncHandler(async (req, res) => {
  try {
    const {
      roomName,
      roomType,
      services,
      location,
      beds,
      description,
      images,
      price,
      status,
    } = req.body;

    // Ki·ªÉm tra n·∫øu thi·∫øu th√¥ng tin
    if (
      !roomName ||
      !roomType ||
      !services ||
      !location ||
      !beds ||
      !description ||
      !images ||
      !price ||
      !status
    ) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ph√≤ng!" });
    }

    // Ki·ªÉm tra n·∫øu ph√≤ng ƒë√£ t·ªìn t·∫°i
    const existingRoom = await Room.findOne({ roomName, location });
    if (existingRoom) {
      return res
        .status(400)
        .json({ message: "Ph√≤ng n√†y ƒë√£ t·ªìn t·∫°i t·∫°i ƒë·ªãa ƒëi·ªÉm n√†y!" });
    }

    // T·∫°o ph√≤ng m·ªõi
    const newRoom = new Room({
      roomName,
      roomType,
      services,
      location,
      beds,
      description,
      images,
      price,
      status,
    });

    // L∆∞u v√†o database
    await newRoom.save();

    res.status(201).json({
      message: "T·∫°o ph√≤ng th√†nh c√¥ng!",
      room: newRoom,
    });
  } catch (error) {
    console.error("üî• L·ªói khi t·∫°o ph√≤ng:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

const updateInfoRoom = asyncHandler(async (req, res) => {
  try {
    const { id } = req.params; // L·∫•y ID ph√≤ng t·ª´ URL
    const updateData = req.body; // D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ client

    // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
    const room = await Room.findById(id);
    if (!room) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng!" });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
    Object.assign(room, updateData);
    const updatedRoom = await room.save();

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng th√†nh c√¥ng!",
      room: updatedRoom,
    });
  } catch (error) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

const deleteRooms = asyncHandler(async (req, res) => {
  try {
    const { roomIds } = req.body; // Nh·∫≠n danh s√°ch ID ph√≤ng c·∫ßn x√≥a

    if (!roomIds || !Array.isArray(roomIds) || roomIds.length === 0) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng cung c·∫•p danh s√°ch ph√≤ng c·∫ßn x√≥a!" });
    }

    // Ki·ªÉm tra c√°c ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
    const existingRooms = await Room.find({ _id: { $in: roomIds } });

    if (existingRooms.length !== roomIds.length) {
      return res
        .status(404)
        .json({ message: "M·ªôt ho·∫∑c nhi·ªÅu ph√≤ng kh√¥ng t·ªìn t·∫°i!" });
    }

    // X√≥a c√°c ph√≤ng
    await Room.deleteMany({ _id: { $in: roomIds } });

    res.status(200).json({
      message: `X√≥a th√†nh c√¥ng ${existingRooms.length} ph√≤ng!`,
      deletedRooms: existingRooms,
    });
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a ph√≤ng:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

module.exports = { createRoom, updateInfoRoom, deleteRooms, getListRooms };
