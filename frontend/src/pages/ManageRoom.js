import React, { useState, useEffect } from "react";
import { Table, Input, Button, Modal, Form, Pagination, message, Switch } from "antd";
import { SearchOutlined, PlusOutlined } from "@ant-design/icons";
import styled from "styled-components";
import StaffSidebar from "../components/StaffSidebar"; // Import StaffSidebar
import API from "../utils/axiosInstance";

// Styled components
const ManageRoomContainer = styled.div`
  display: flex;
  min-height: 100vh;
  background: #eef1f6;
`;

const ContentWrapper = styled.div`
  flex: 1;
  padding: 20px;
  transition: margin-left 0.3s;
  margin-left: ${(props) => (props.isSidebarOpen ? "250px" : "70px")};
  display: flex;
  flex-direction: column;
  min-height: calc(100vh - 130px);
`;

const Header = styled.header`
  padding: 15px;
  text-align: center;
  font-size: 30px;
  font-weight: bold;
  letter-spacing: 1px;
`;

const ManageRoom = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false); // Tr·∫°ng th√°i m·ªü/ƒë√≥ng sidebar
  const [isModalVisible, setIsModalVisible] = useState(false); // Hi·ªÉn th·ªã modal th√™m/s·ª≠a ph√≤ng
  const [editingRoom, setEditingRoom] = useState(null); // Ph√≤ng ƒëang ch·ªânh s·ª≠a
  const [rooms, setRooms] = useState([]); // Danh s√°ch ph√≤ng

  const [form] = Form.useForm(); // Form qu·∫£n l√Ω d·ªØ li·ªáu

  const fetchData = async () => {
    try {
      const roomResponse = await API.get("/room?sort=+quantityLeft");
      setRooms(roomResponse.data.rooms);
    } catch (error) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ph√≤ng:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // D·ªØ li·ªáu m·∫´u (mock data)
  const mockRooms = [
    {
      id: 1,
      name: "Ph√≤ng 101",
      description: "Ph√≤ng ƒë∆°n, view ƒë·∫πp",
      capacity: 2,
    },
    {
      id: 2,
      name: "Ph√≤ng 102",
      description: "Ph√≤ng ƒë√¥i, ti·ªán nghi",
      capacity: 4,
    },
    {
      id: 3,
      name: "Ph√≤ng 103",
      description: "Ph√≤ng gia ƒë√¨nh",
      capacity: 6,
    },
  ];

  // M·ªü modal th√™m/s·ª≠a ph√≤ng
  const showModal = (room = null) => {
    setEditingRoom(room);
    form.setFieldsValue(room || { name: "", description: "", capacity: "" });
    setIsModalVisible(true);
  };

  // ƒê√≥ng modal
  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  // X·ª≠ l√Ω l∆∞u ph√≤ng (ch·ªâ l√† giao di·ªán, kh√¥ng c√≥ logic API)
  const handleSaveRoom = async (values) => {
    try {
      if (editingRoom) {
        // G·ªçi API c·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
        console.log(editingRoom._id);
        const { data } = await API.put(`/room/${editingRoom._id}`, values);
        message.success("C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng!");
      }

      fetchData(); // Load l·∫°i danh s√°ch ph√≤ng
      setIsModalVisible(false);
    } catch (error) {
      console.error("üî• L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", error);
      message.error("C·∫≠p nh·∫≠t ph√≤ng th·∫•t b·∫°i!");
    }
  };

  const handleStatusChange = async (checked, room) => {
    try {
      const newStatus = checked ? "Tr·ªëng" : "H·∫øt ph√≤ng";
      await API.put(`/room/${room._id}`, { status: newStatus });
      message.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng th√†nh c√¥ng!");
      fetchData(); // Load l·∫°i danh s√°ch ph√≤ng sau khi c·∫≠p nh·∫≠t
    } catch (error) {
      console.error("üî• L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng:", error);
      message.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng th·∫•t b·∫°i!");
    }
  };

  // C·ªôt c·ªßa b·∫£ng
  const columns = [
    {
      title: "T√™n ph√≤ng",
      dataIndex: "name",
      key: "name",
    },
    {
      title: "M√¥ t·∫£",
      dataIndex: "description",
      key: "description",
    },
    {
      title: "Ph√≤ng",
      dataIndex: "beds",
      key: "beds",
    },
    {
      title: "V·ªã tr√≠",
      dataIndex: "location",
      key: "location",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status, record) => (
        <Switch
          checked={status === "Tr·ªëng"}
          onChange={(checked) => handleStatusChange(checked, record)}
          checkedChildren="Tr·ªëng"
          unCheckedChildren="H·∫øt ph√≤ng"
        />
      ),
    },
    {
      title: "T·ªïng s·ªë ph√≤ng",
      dataIndex: "quantity",
      key: "quantity",
    },
    {
      title: "S·ªë ph√≤ng c√≤n l·∫°i",
      dataIndex: "quantityLeft",
      key: "quantityLeft",
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "actions",
      render: (_, record) => (
        <div>
          <Button type="link" onClick={() => showModal(record)}>
            S·ª≠a
          </Button>
          <Button
            type="link"
            danger
            onClick={() => console.log("X√≥a ph√≤ng:", record.id)}
          >
            X√≥a
          </Button>
        </div>
      ),
    },
  ];

  return (
    <ManageRoomContainer>
      {/* Sidebar */}
      <StaffSidebar onToggle={setIsSidebarOpen} />

      {/* N·ªôi dung ch√≠nh */}
      <ContentWrapper isSidebarOpen={isSidebarOpen}>
        <Header>Qu·∫£n l√Ω ph√≤ng</Header>

        {/* Thanh t√¨m ki·∫øm v√† n√∫t th√™m ph√≤ng */}
        <div style={{ marginBottom: "16px", display: "flex", gap: "10px" }}>
          <Input
            placeholder="T√¨m ki·∫øm ph√≤ng..."
            prefix={<SearchOutlined />}
            style={{ width: 300 }}
          />
          {/* <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={() => showModal()}
          >
            Th√™m ph√≤ng
          </Button> */}
        </div>

        {/* B·∫£ng hi·ªÉn th·ªã danh s√°ch ph√≤ng */}
        <Table
          columns={columns}
          dataSource={rooms}
          rowKey="id"
          pagination={false}
        />

        {/* Ph√¢n trang */}
        <Pagination
          current={1}
          pageSize={5}
          total={rooms.length}
          onChange={(page, size) => console.log("Chuy·ªÉn trang:", page, size)}
          style={{ marginTop: "16px", textAlign: "right" }}
        />

        {/* Modal th√™m/s·ª≠a ph√≤ng */}
        <Modal
          title={editingRoom ? "S·ª≠a ph√≤ng" : "Th√™m ph√≤ng"}
          visible={isModalVisible}
          onCancel={handleCancel}
          footer={null}
        >
          <Form form={form} onFinish={handleSaveRoom} layout="vertical">
            <Form.Item
              label="T√™n ph√≤ng"
              name="name"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ph√≤ng" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item
              label="Lo·∫°i ph√≤ng"
              name="type"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p lo·∫°i ph√≤ng" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item label="M√¥ t·∫£" name="description">
              <Input.TextArea />
            </Form.Item>
            <Form.Item
              label="Tr·∫°ng th√°i"
              name="status"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p tr·∫°ng th√°i" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item>
              <Button type="primary" htmlType="submit">
                L∆∞u
              </Button>
              <Button onClick={handleCancel} style={{ marginLeft: "10px" }}>
                H·ªßy
              </Button>
            </Form.Item>
          </Form>
        </Modal>
      </ContentWrapper>
    </ManageRoomContainer>
  );
};

export default ManageRoom;
