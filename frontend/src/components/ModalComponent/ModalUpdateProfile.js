import React, { useEffect, useState } from "react";
import { Modal, Form, Input, Button, message } from "antd";
import API, { refreshAccessToken } from "../../utils/axiosInstance";

const ModalUpdateProfile = ({
  isModalUpdateProfile,
  setIsModalUpdateProfile,
  profile,
  setUser,
  accessToken,
  setAccessToken, // ‚úÖ Nh·∫≠n h√†m c·∫≠p nh·∫≠t token t·ª´ context
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (profile) {
      form.setFieldsValue(profile);
    }
  }, [profile, form, isModalUpdateProfile]);

  const onFinish = async (values) => {
    if (!accessToken) {
      message.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      return;
    }

    setLoading(true);
    try {
      const response = await API.patch("/user/update-profile", values, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      message.success("H·ªì s∆° c·∫≠p nh·∫≠t th√†nh c√¥ng! üéâ");

      setUser((prevUser) => ({
        ...prevUser,
        ...response.data,
      }));
      setIsModalUpdateProfile(false); // ‚úÖ ƒê√≥ng modal
    } catch (error) {
      if (error.response?.status === 401) {
        console.log("üîÑ Token h·∫øt h·∫°n, th·ª≠ refresh...");
        const newToken = await refreshAccessToken();

        if (newToken) {
          setAccessToken(newToken); // ‚úÖ C·∫≠p nh·∫≠t token m·ªõi
          try {
            // ‚úÖ Th·ª≠ g·ª≠i l·∫°i request v·ªõi token m·ªõi ngay l·∫≠p t·ª©c
            const retryResponse = await API.patch(
              "/user/update-profile",
              values,
              {
                headers: { Authorization: `Bearer ${newToken}` },
              }
            );

            console.log(
              "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng (sau refresh):",
              retryResponse.data
            );
            message.success("H·ªì s∆° c·∫≠p nh·∫≠t th√†nh c√¥ng! üéâ");

            setUser(retryResponse.data);
            setIsModalUpdateProfile(false);
            return;
          } catch (retryError) {
            console.error("‚ùå L·ªói sau khi refresh token:", retryError);
            message.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
          }
        } else {
          message.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
          return;
        }
      }

      const errorMsg =
        error.response?.data?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.";
      message.error(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title="C·∫≠p nh·∫≠t h·ªì s∆°"
      open={isModalUpdateProfile}
      footer={null}
      onCancel={() => setIsModalUpdateProfile(false)}
    >
      <Form
        form={form}
        name="update-profile"
        labelCol={{ span: 6 }}
        wrapperCol={{ span: 16 }}
        style={{ maxWidth: 600 }}
        initialValues={profile}
        onFinish={onFinish}
        autoComplete="off"
      >
        <Form.Item
          label="T√™n ƒë·∫ßy ƒë·ªß"
          name="full_name"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß" }]}
        >
          <Input disabled={loading} />
        </Form.Item>

        <Form.Item
          label="S·ªë ƒëi·ªán tho·∫°i"
          name="phone"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
            {
              pattern: /^[0-9]{10,11}$/,
              message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
            },
          ]}
        >
          <Input disabled={loading} />
        </Form.Item>

        <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
          <Button type="primary" htmlType="submit" loading={loading}>
            C·∫≠p nh·∫≠t
          </Button>
          <Button
            style={{ marginLeft: 10 }}
            onClick={() => setIsModalUpdateProfile(false)}
            disabled={loading}
          >
            H·ªßy
          </Button>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default ModalUpdateProfile;
